// Code generated by MockGen. DO NOT EDIT.
// Source: bcrypt_builder.go

// Package bcrypt is a generated GoMock package.
package bcrypt

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBcryptBuilder is a mock of BcryptBuilder interface.
type MockBcryptBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBcryptBuilderMockRecorder
}

// MockBcryptBuilderMockRecorder is the mock recorder for MockBcryptBuilder.
type MockBcryptBuilderMockRecorder struct {
	mock *MockBcryptBuilder
}

// NewMockBcryptBuilder creates a new mock instance.
func NewMockBcryptBuilder(ctrl *gomock.Controller) *MockBcryptBuilder {
	mock := &MockBcryptBuilder{ctrl: ctrl}
	mock.recorder = &MockBcryptBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBcryptBuilder) EXPECT() *MockBcryptBuilderMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockBcryptBuilder) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockBcryptBuilderMockRecorder) CompareHashAndPassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockBcryptBuilder)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GenerateFromPassword mocks base method.
func (m *MockBcryptBuilder) GenerateFromPassword(password []byte, cost int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFromPassword", password, cost)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFromPassword indicates an expected call of GenerateFromPassword.
func (mr *MockBcryptBuilderMockRecorder) GenerateFromPassword(password, cost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFromPassword", reflect.TypeOf((*MockBcryptBuilder)(nil).GenerateFromPassword), password, cost)
}
